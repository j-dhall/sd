#Embedded Tomcat Container/Server
server.tomcat.accesslog.enabled=true
server.tomcat.basedir=./tomcat
server.tomcat.accesslog.directory=logs

#Logging

#The following properties cause exceptions like 
#org.apache.tomcat.jni.LibraryNotFoundError: Can't load library: C:\mydrive\git\sd\java\catalog2\bin\**tcnative-1.dll**
#java.lang.ClassNotFoundException: **java.net.UnixDomainSocketAddress**
#logging.level.org.apache.tomcat=DEBUG
#logging.level.org.apache.catalina=DEBUG

#Using **logging.level.edu.ds.ms.retail.catalog2=TRACE** does not cause any exception.
logging.level.edu.sd.ms.backing.redis.redisdemo=TRACE
logging.file.name=./tomcat/logs/server.log
#Log Hibernate queries
logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.type.descriptor.sql=TRACE

#EXCEPTION HANDLING
server.error.include-message=always

#MySQL connection properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=scott
spring.datasource.password=tiger
spring.datasource.url=jdbc:mysql://localhost:3306/student?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true

#Have @NotNull validation create a NOT NULL constraint in database schema
#NOTE, unlike what we expected,  NOT NULL constraint was not generated.
#So, we are using "nullable = false" (to generate NOT NULL database constraints) along with @NotNull.
spring.jpa.properties.hibernate.validator.apply_to_ddl=true

#Log JPA/Hibernate queries
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#Use schema.sql
spring.jpa.hibernate.ddl-auto=validate

#Hibernate SQL dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect



#Redis cache configuration
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379
spring.cache.cache-names=student
spring.cache.redis.time-to-live=6000000

#DEPRECATED Transport 9200
#elastic config
#spring.data.elasticsearch.cluster-name=${CLUSTER_NAME:elastic}
#spring.data.elasticsearch.cluster-nodes=${CLUSTER_NODES:localhost:9300}
spring.data.elasticsearch.repositories.enabled=true

#HTTP 9200 High-Level
#RestHighLevelClient bean will be auto-configured by Spring Boot
#Need to inject ElasticsearchRestTemplate bean.

#Unsecured (without X-Pack plugin)
spring.elasticsearch.rest.uris=http://localhost:9200
spring.elasticsearch.rest.read-timeout=10s
